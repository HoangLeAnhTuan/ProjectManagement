@GetMapping("/project/register")
public String showRegisterForm(Model model) {
    if (!model.containsAttribute("project")) {
        model.addAttribute("project", new ProjectRegisterDTO());
    }
    model.addAttribute("departments", departmentService.findAll());
    return "project-register";
}

@PostMapping("/project/register")
public String returnToRegister(@ModelAttribute ProjectRegisterDTO projectDTO, Model model) {
    model.addAttribute("project", projectDTO);
    model.addAttribute("departments", departmentService.findAll());
    return "project-register";
}

@PostMapping("/project/register/confirm")
public String confirmRegister(@ModelAttribute ProjectRegisterDTO projectDTO, Model model) {
    Department dept = departmentService.findById(projectDTO.getProjectDept());
    String difficultyText = switch (projectDTO.getDifficulty()) {
        case "E" -> "Easy";
        case "M" -> "Medium";
        case "H" -> "Hard";
        default -> "Unknown";
    };

    model.addAttribute("project", projectDTO);
    model.addAttribute("department", dept);
    model.addAttribute("difficultyText", difficultyText);
    return "project-confirm";
}

@PostMapping("/project/register/save")
public String saveProject(@ModelAttribute @Validated ProjectRegisterDTO projectDTO,
                          BindingResult result, Model model) {
    if (result.hasErrors()) {
        model.addAttribute("departments", departmentService.findAll());
        return "project-register";
    }

    if (projectService.existsByProjectId(projectDTO.getProjectId())) {
        result.rejectValue("projectId", null, "Project ID already exists");
        model.addAttribute("departments", departmentService.findAll());
        return "project-register";
    }

    Project project = new Project();
    project.setProjectId(projectDTO.getProjectId());
    project.setProjectName(projectDTO.getProjectName());
    project.setDifficulty(projectDTO.getDifficulty().charAt(0));
    project.setVersion(1);
    project.setStartDay(LocalDateTime.now());
    project.setEndDay(LocalDateTime.now().plusMonths(6));
    project.setDepartment(departmentService.findById(projectDTO.getProjectDept()));

    projectService.save(project);

    DeleteCompletionDTO completion = new DeleteCompletionDTO(
        project.getProjectId(),
        String.format("Register complete for %s with ID #%d", project.getProjectName(), project.getProjectId()));
    model.addAttribute("completion", completion);
    return "delete-complete";
}
